const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const jwt = require('jsonwebtoken')
const bcrypt = require('bcrypt')

const app = express()
app.use(express.json())

let db = null
const dbpath = path.join(__dirname, 'covid19IndiaPortal.db')

const initalizationOfServer = async () => {
  try {
    db = await open({
      filename: dbpath,
      driver: sqlite3.Database,
    })

    app.listen(3000, () => {
      console.log('Server Started Sucessfully at http://localhost:3000')
    })
  } catch (error) {
    console.log(`${error.message}`)
    process.exit(1)
  }
}

initalizationOfServer()

//Authentication
const authenticateToken = (request, response, next) => {
  let jwtToken
  const authHeader = request.headers['authorization']

  if (authHeader !== undefined) {
    jwtToken = authHeader.split(' ')[1]
  } else {
    jwt.verify(jwtToken, 'COVID_19_SECRET_KEY', async (error, payload) => {
      if (error) {
        response.status(401)
        response.send('Invalid JWT Token')
      } else {
        next()
      }
    })
  }
}

//API1 POST LOGIN

app.post('/login/', async (request, response) => {
  const {username, password} = request.body
  const selectUserQuery = `
    SELECT *
    FROM user
    WHERE username = "${username}";`
  const userData = await db.get(selectUserQuery)

  if (userData === undefined) {
    response.status(400)
    response.send('Invalid user')
  } else {
    const isPasswordMatched = await bcrypt.compare(password, userData.password)

    if (isPasswordMatched) {
      const payload = {username: username}
      const jwtToken = jwt.sign(payload, 'COVID_19_SECRET_KEY')
      response.send({jwtToken})
    } else {
      response.status(400)
      response.send('Invalid password')
    }
  }
})

//API2 GET a list of all states in the state table

app.get('/states/', authenticateToken, async (request, response) => {
  const getAllStatesQuery = `
    SELECT state_id AS stateId, state_name AS stateName, population
    FROM state;`
  const statesData = await db.all(getAllStatesQuery)
  response.send(statesData)
})

//API3 GET Returns a state based on the state ID

app.get('/states/:stateId/', authenticateToken, async (request, response) => {
  const {stateId} = request.params
  const getAllStatesQuery = `
    SELECT state_id AS stateId, state_name AS stateName, population
    FROM state
    WHERE state_id = ${stateId};`
  const statesData = await db.get(getAllStatesQuery)
  response.send(statesData)
})

//API4 POST district in the district table, district_id is auto-incremented

app.post('/districts/', authenticateToken, async (request, response) => {
  const {districtName, stateId, cases, cured, active, deaths} = request.body
  const postDistrictQuery = `
    INSERT INTO district(district_name, state_id, cases, cured, active, deaths)
    VALUES("${districtName}", "${stateId}", ${cases}, ${cured}, ${active}, ${deaths});`
  const districtData = await db.run(postDistrictQuery)
  const districtId = districtData.lastID
  response.send('District Successfully Added')
})

//API5 a district based on the district ID

app.get(
  '/districts/:districtId/',
  authenticateToken,
  async (request, response) => {
    const {districtId} = request.params
    const getDistrictQuery = `
    SELECT district_id AS districtId, district_name AS districtName, state_id AS stateId, SUM(cases) AS cases, SUM(cured) AS cured, SUM(active) AS active, SUM(deaths) AS deaths
    FROM district
    WHERE district_id = ${districtId};`

    const districtData = await db.get(getDistrictQuery)
    response.send(districtData)
  },
)

//API6 DELETE

app.delete(
  '/districts/:districtId/',
  authenticateToken,
  async (request, response) => {
    const {districtId} = request.params
    const deleteDistrictQuery = `
   DELETE FROM district
   WHERE district_id = ${districtId};`

    await db.run(deleteDistrictQuery)
    response.send('District Removed')
  },
)

//API7 PUT a specific district based on the district ID

app.put(
  '/districts/:districtId/',
  authenticateToken,
  async (request, response) => {
    const {districtId} = request.params
    const {districtName, stateId, cases, cured, active, deaths} = request.body
    const updateDistrictQuery = `
      UPDATE district
      SET district_name = "${districtName}", state_id = ${stateId}, cases = ${cases}, cured = ${cured}, active = ${active}, deaths = ${deaths}
      WHERE district_id = ${districtId};`

    await db.run(updateDistrictQuery)
    response.send('District Details Updated')
  },
)

//API8 GET total cases, cured, active, deaths of a specific state based on state ID

app.get(
  '/states/:stateId/stats/',
  authenticateToken,
  async (request, response) => {
    const {stateId} = request.params
    const getStatsQuery = `
    SELECT SUM(cases) AS totalCases, SUM(cured) AS totalCured, SUM(active) AS totalActive, SUM(deaths) AS totalDeaths
    FROM district
    WHERE state_id = ${stateId};`

    const statsData = await database.get(getStatsQuery)
    response.send(statsData)
  },
)

module.exports = app
